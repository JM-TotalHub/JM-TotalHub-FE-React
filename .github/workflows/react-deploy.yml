# name: Build and Deploy Frontend

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: 코드 체크아웃
#         uses: actions/checkout@v3

#       - name: 환경 변수 로드
#         id: load-env
#         run: |
#           echo "${{ secrets.REACT_APP_SERVER01_ENV }}" | while IFS= read -r line; do
#             # 주석과 빈 줄 무시
#             if [[ -n "$line" && "$line" != \#* ]]; then
#               echo "$line" >> $GITHUB_ENV
#             fi
#           done

#       - name: Docker Buildx 설정
#         uses: docker/setup-buildx-action@v1

#       - name: Docker Hub 로그인
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Docker image 빌드 & 푸쉬
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/jm-total-hub:react-latest

#       - name: EC2 배포
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ env.REACT_APP_REACT_SERVER01_EC2_HOST }}
#           username: ${{ env.REACT_APP_REACT_SERVER01_EC2_USERNAME }}
#           key: ${{ secrets.REACT_APP_REACT_SERVER01_EC2_PRIVATE_KEY }}
#           script: |
#             docker image prune -a -f --filter "until=12h"
#             docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#             export REACT_APP_REACT_SERVER_ENV_STATUS=${{ env.REACT_APP_REACT_SERVER_ENV_STATUS }}
#             export REACT_APP_NGINX_SERVER01_HOST=${{ env.REACT_APP_NGINX_SERVER01_HOST }}
#             cd react
#             sudo -E docker-compose pull react
#             sudo -E docker-compose up -d react

name: 리액트 애플리케이션 배포

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설치
        uses: actions/setup-node@v2
        with:
          node-version: '20.14' # 사용할 Node.js 버전

      - name: 의존성 설치
        run: npm install

      - name: 리액트 애플리케이션 빌드(eslint 비활성화)
        run: CI=false npm run build

      - name: 환경 변수 로드
        id: load-env
        run: |
          echo "${{ secrets.REACT_APP_SERVER01_ENV }}" | while IFS= read -r line; do
            if [[ -n "$line" && "$line" != \#* ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done

      - name: nginx 폴더 생성(있으면 무시)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REACT_APP_REACT_SERVER01_EC2_HOST }}
          username: ${{ env.REACT_APP_REACT_SERVER01_EC2_USERNAME }}
          key: ${{ secrets.REACT_APP_REACT_SERVER01_EC2_PRIVATE_KEY }}
          script: |
            mkdir -p ~/react

      - name: 빌드 결과물을 EC2 서버에 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.REACT_APP_REACT_SERVER01_EC2_HOST }}
          username: ${{ env.REACT_APP_REACT_SERVER01_EC2_USERNAME }}
          key: ${{ secrets.REACT_APP_REACT_SERVER01_EC2_PRIVATE_KEY }}
          source: 'build/*' # 빌드된 파일을 업로드
          target: '~/react/' # EC2 서버의 nginx 디렉토리에 업로드

      - name: 도커 컴포즈 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REACT_APP_REACT_SERVER01_EC2_HOST }}
          username: ${{ env.REACT_APP_REACT_SERVER01_EC2_USERNAME }}
          key: ${{ secrets.REACT_APP_REACT_SERVER01_EC2_PRIVATE_KEY }}
          script: |
            docker image prune -a -f --filter "until=12h"
            export REACT_APP_REACT_SERVER_ENV_STATUS=${{ env.REACT_APP_REACT_SERVER_ENV_STATUS }}
            export REACT_APP_NGINX_SERVER01_HOST=${{ env.REACT_APP_NGINX_SERVER01_HOST }}
            export REACT_APP_REACT_SERVER01_EC2_HOST=${{ env.REACT_APP_REACT_SERVER01_EC2_HOST }}
            export REACT_APP_REACT_SERVER01_EC2_PORT=${{ env.REACT_APP_REACT_SERVER01_EC2_PORT }}
            export REACT_APP_REACT_SERVER01_EC2_PROTOCOL=${{ env.REACT_APP_REACT_SERVER01_EC2_PROTOCOL }}
            export REACT_APP_REACT_SERVER01_EC2_USERNAME=${{ env.REACT_APP_REACT_SERVER01_EC2_USERNAME }}
            # nginx.conf 템플릿 파일에서 환경 변수 치환
            # envsubst '\
            #   \$REACT_APP_REACT_SERVER_ENV_STATUS \
            #   \$REACT_APP_NGINX_SERVER01_HOST \
            #   \$REACT_APP_REACT_SERVER01_EC2_HOST \
            #   \$REACT_APP_REACT_SERVER01_EC2_PORT \
            #   \$REACT_APP_REACT_SERVER01_EC2_PROTOCOL \
            #   \$REACT_APP_REACT_SERVER01_EC2_USERNAME \
            #   \$SIGNAL_SERVER01_PORT' < ~/react/nginx.conf.template > ~/nginx/nginx.conf  
            cd ~/react
            sudo -E docker-compose pull nginx
            sudo -E docker-compose up -d nginx
            sudo -E docker-compose logs nginx
